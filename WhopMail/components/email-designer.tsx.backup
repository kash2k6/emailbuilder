"use client"

import React, { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { 
  Type, 
  Image as ImageIcon, 
  Square, 
  Minus, 
  Move, 
  Trash2, 
  Copy,
  Send,
  Eye,
  AlignLeft,
  AlignCenter,
  AlignRight,
  Save,
  FolderOpen,
  Star,
  MoreHorizontal,
  RefreshCw,
  Bold,
  Italic,
  List,
  ListOrdered,
  Columns,
  Quote,
  Link,
  Unlink,
  Clock,
  HelpCircle,
  ChevronDown,
  ChevronUp
} from 'lucide-react'
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import { Label } from '@/components/ui/label'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog'
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip'
import { EmailWidthSelector } from '@/components/email-width-selector'

interface EmailElement {
  id: string
  type: 'text' | 'button' | 'image' | 'divider' | 'spacer' | 'footer' | 'header' | 'columns'
  content: string
  styles: Record<string, string>
  properties: Record<string, any>
  children?: EmailElement[] // For columns to contain other elements
}

interface RichTextToolbarProps {
  onFormat: (format: string) => void
  onAlign: (alignment: string) => void
  currentAlignment?: string
}

function RichTextToolbar({ onFormat, onAlign, currentAlignment = 'left' }: RichTextToolbarProps) {
  return (
    <TooltipProvider>
      <div className="flex flex-wrap gap-1 p-2 border-b bg-muted/30">
        {/* Text Formatting */}
        <div className="flex gap-1">
          <Tooltip>
            <TooltipTrigger asChild>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => onFormat('bold')}
                className="h-8 w-8 p-0"
              >
                <Bold className="h-4 w-4" />
              </Button>
            </TooltipTrigger>
            <TooltipContent>
              <p>Bold (Ctrl+B)</p>
            </TooltipContent>
          </Tooltip>
          
          <Tooltip>
            <TooltipTrigger asChild>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => onFormat('italic')}
                className="h-8 w-8 p-0"
              >
                <Italic className="h-4 w-4" />
              </Button>
            </TooltipTrigger>
            <TooltipContent>
              <p>Italic (Ctrl+I)</p>
            </TooltipContent>
          </Tooltip>
        </div>

        {/* Lists */}
        <div className="flex gap-1">
          <Tooltip>
            <TooltipTrigger asChild>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => onFormat('bullet-list')}
                className="h-8 w-8 p-0"
              >
                <List className="h-4 w-4" />
              </Button>
            </TooltipTrigger>
            <TooltipContent>
              <p>Bullet List</p>
            </TooltipContent>
          </Tooltip>
          
          <Tooltip>
            <TooltipTrigger asChild>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => onFormat('numbered-list')}
                className="h-8 w-8 p-0"
              >
                <ListOrdered className="h-4 w-4" />
              </Button>
            </TooltipTrigger>
            <TooltipContent>
              <p>Numbered List</p>
            </TooltipContent>
          </Tooltip>
        </div>

        {/* Alignment */}
        <div className="flex gap-1">
          <Tooltip>
            <TooltipTrigger asChild>
              <Button
                variant={currentAlignment === 'left' ? 'default' : 'ghost'}
                size="sm"
                onClick={() => onAlign('left')}
                className="h-8 w-8 p-0"
              >
                <AlignLeft className="h-4 w-4" />
              </Button>
            </TooltipTrigger>
            <TooltipContent>
              <p>Align Left</p>
            </TooltipContent>
          </Tooltip>
          
          <Tooltip>
            <TooltipTrigger asChild>
              <Button
                variant={currentAlignment === 'center' ? 'default' : 'ghost'}
                size="sm"
                onClick={() => onAlign('center')}
                className="h-8 w-8 p-0"
              >
                <AlignCenter className="h-4 w-4" />
              </Button>
            </TooltipTrigger>
            <TooltipContent>
              <p>Align Center</p>
            </TooltipContent>
          </Tooltip>
          
          <Tooltip>
            <TooltipTrigger asChild>
              <Button
                variant={currentAlignment === 'right' ? 'default' : 'ghost'}
                size="sm"
                onClick={() => onAlign('right')}
                className="h-8 w-8 p-0"
              >
                <AlignRight className="h-4 w-4" />
              </Button>
            </TooltipTrigger>
            <TooltipContent>
              <p>Align Right</p>
            </TooltipContent>
          </Tooltip>
        </div>

        {/* Special Formatting */}
        <div className="flex gap-1">
          <Tooltip>
            <TooltipTrigger asChild>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => onFormat('quote')}
                className="h-8 w-8 p-0"
              >
                <Quote className="h-4 w-4" />
              </Button>
            </TooltipTrigger>
            <TooltipContent>
              <p>Quote Block</p>
            </TooltipContent>
          </Tooltip>
          
          <Tooltip>
            <TooltipTrigger asChild>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => onFormat('columns')}
                className="h-8 w-8 p-0"
              >
                <Columns className="h-4 w-4" />
              </Button>
            </TooltipTrigger>
            <TooltipContent>
              <p>Two Columns</p>
            </TooltipContent>
          </Tooltip>
        </div>
      </div>
    </TooltipProvider>
  )
}

interface EmailDesignerProps {
  onSend: (emailData: { 
    subject: string; 
    html: string; 
    text: string; 
    error?: string; 
    selectedAudienceId?: string;
    scheduledAt?: string;
    emailWidth?: number;
  }) => void
  initialSubject?: string
  whopUserId?: string
  isSending?: boolean
  availableAudiences?: Array<{ id: string; name: string; member_count: number }>
}

export function EmailDesigner({ onSend, initialSubject = '', whopUserId, isSending = false, availableAudiences = [] }: EmailDesignerProps) {
  const [elements, setElements] = useState<EmailElement[]>([
    {
      id: '1',
      type: 'text',
      content: 'Welcome to our newsletter!',
      styles: {
        fontSize: '24px',
        fontWeight: 'bold',
        color: 'var(--foreground)',
        textAlign: 'center',
        margin: '20px 0',
        backgroundColor: 'transparent'
      },
      properties: {}
    },
    {
      id: '2',
      type: 'text',
      content: 'This is a **bold text** example and this is *italic text*.\n\nHere\'s a list:\n- First item\n- Second item\n- Third item\n\nUse double line breaks for new paragraphs.',
      styles: {
        fontSize: '16px',
        color: 'var(--foreground)',
        lineHeight: '1.6',
        margin: '15px 0',
        backgroundColor: 'transparent'
      },
      properties: {}
    },
    {
      id: '3',
      type: 'footer',
      content: 'Footer content will be generated automatically',
      styles: {
        fontSize: '14px',
        color: 'var(--muted-foreground)',
        textAlign: 'center',
        margin: '20px 0',
        padding: '20px 0',
        borderTop: '1px solid var(--border)',
        backgroundColor: 'transparent'
      },
      properties: {}
    }
  ])
  
  const [selectedElement, setSelectedElement] = useState<string | null>(null)
  const [selectedNestedElement, setSelectedNestedElement] = useState<{parentId: string, childId: string} | null>(null)
  const [subject, setSubject] = useState(initialSubject)
  const [previewMode, setPreviewMode] = useState(false)
  const [emailPreviewTheme, setEmailPreviewTheme] = useState<'light' | 'dark'>('dark')
  
  // Template state
  const [templates, setTemplates] = useState<any[]>([])
  const [showSaveDialog, setShowSaveDialog] = useState(false)
  const [showLoadDialog, setShowLoadDialog] = useState(false)
  const [showEditDialog, setShowEditDialog] = useState(false)
  const [templateName, setTemplateName] = useState('')
  const [templateDescription, setTemplateDescription] = useState('')
  const [templateCategory, setTemplateCategory] = useState('general')
  const [loading, setLoading] = useState(false)
  const [processedHtmlContent, setProcessedHtmlContent] = useState<string | null>(null)
  const [editingTemplateId, setEditingTemplateId] = useState<string | null>(null)
  const [editingTemplateName, setEditingTemplateName] = useState('')
  const [editingTemplateDescription, setEditingTemplateDescription] = useState('')
  const [editingTemplateCategory, setEditingTemplateCategory] = useState('general')
  
  // Audience selection state
  const [selectedAudienceId, setSelectedAudienceId] = useState<string>('')

  // Email width state
  const [emailWidth, setEmailWidth] = useState<number>(600)
  const [showTemplateVariables, setShowTemplateVariables] = useState(false)

  // Scheduling state
  const [scheduledDate, setScheduledDate] = useState("")
  const [scheduledTime, setScheduledTime] = useState("")
  const [scheduleType, setScheduleType] = useState<"immediate" | "custom" | "preset">("immediate")
  const [presetSchedule, setPresetSchedule] = useState<string>("")

  // Set default date and time for scheduling
  useEffect(() => {
    if (scheduleType === "custom" && !scheduledDate) {
      const tomorrow = new Date()
      tomorrow.setDate(tomorrow.getDate() + 1)
      setScheduledDate(tomorrow.toISOString().split('T')[0])
      setScheduledTime("09:00")
    }
  }, [scheduleType, scheduledDate])

  // Helper function to format scheduled time for Resend
  const formatScheduledTime = (): string | undefined => {
    // Check if scheduling is enabled (not immediate)
    if (scheduleType === "immediate") return undefined
    
    if (scheduleType === "preset" && presetSchedule) {
      // Convert preset values to proper ISO date strings
      const now = new Date()
      let scheduledDate: Date
      
      switch (presetSchedule) {
        case "in 1 hour":
          scheduledDate = new Date(now.getTime() + 60 * 60 * 1000)
          break
        case "in 2 hours":
          scheduledDate = new Date(now.getTime() + 2 * 60 * 60 * 1000)
          break
        case "in 4 hours":
          scheduledDate = new Date(now.getTime() + 4 * 60 * 60 * 1000)
          break
        case "in 6 hours":
          scheduledDate = new Date(now.getTime() + 6 * 60 * 60 * 1000)
          break
        case "in 12 hours":
          scheduledDate = new Date(now.getTime() + 12 * 60 * 60 * 1000)
          break
        case "tomorrow at 9am":
          scheduledDate = new Date(now.getTime() + 24 * 60 * 60 * 1000)
          scheduledDate.setHours(9, 0, 0, 0)
          break
        case "tomorrow at 2pm":
          scheduledDate = new Date(now.getTime() + 24 * 60 * 60 * 1000)
          scheduledDate.setHours(14, 0, 0, 0)
          break
        case "next monday at 9am":
          scheduledDate = new Date(now.getTime() + 24 * 60 * 60 * 1000)
          // Find next Monday
          while (scheduledDate.getDay() !== 1) { // 1 = Monday
            scheduledDate.setDate(scheduledDate.getDate() + 1)
          }
          scheduledDate.setHours(9, 0, 0, 0)
          break
        default:
          return undefined
      }
      
      return scheduledDate.toISOString()
    }
    
    if (scheduleType === "custom" && scheduledDate && scheduledTime) {
      const dateTime = new Date(`${scheduledDate}T${scheduledTime}`)
      return dateTime.toISOString()
    }
    
    return undefined
  }

  const addElement = (type: EmailElement['type'], parentId?: string) => {
    const newElement: EmailElement = {
      id: `element_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      type,
      content: getDefaultContent(type),
      styles: getDefaultStyles(type),
      properties: getDefaultProperties(type)
    }

    if (parentId) {
      // Add to a specific column
      setElements(prev => prev.map(el => {
        if (el.id === parentId && el.type === 'columns') {
          return {
            ...el,
            children: [...(el.children || []), newElement]
          }
        }
        return el
      }))
    } else {
      // Add to main elements list
      setElements(prev => [...prev, newElement])
    }
  }

  const addElementToColumn = (columnId: string, type: EmailElement['type']) => {
    addElement(type, columnId)
  }

  const getDefaultStyles = (type: EmailElement['type']): Record<string, string> => {
    switch (type) {
      case 'text':
        return {
          fontSize: '16px',
          color: 'var(--foreground)',
          lineHeight: '1.6',
          margin: '15px 0',
          backgroundColor: 'transparent'
        }
      case 'button':
        return {
          backgroundColor: 'var(--primary)',
          color: 'var(--primary-foreground)',
          padding: '12px 24px',
          borderRadius: '6px',
          textDecoration: 'none',
          display: 'inline-block',
          fontSize: '16px',
          fontWeight: '600',
          textAlign: 'center',
          border: 'none',
          cursor: 'pointer'
        }
      case 'image':
        return {
          maxWidth: '100%',
          height: 'auto',
          display: 'block',
          margin: '20px auto'
        }
      case 'divider':
        return {
          height: '1px',
          backgroundColor: 'var(--border)',
          margin: '20px 0',
          border: 'none'
        }
      case 'spacer':
        return {
          height: '20px',
          backgroundColor: 'transparent'
        }
      case 'header':
        return {
          fontSize: '18px',
          fontWeight: 'bold',
          color: 'var(--foreground)',
          textAlign: 'center',
          margin: '20px 0',
          padding: '20px 0',
          borderBottom: '1px solid var(--border)',
          backgroundColor: 'transparent'
        }
      case 'footer':
        return {
          fontSize: '14px',
          color: 'var(--muted-foreground)',
          textAlign: 'center',
          margin: '20px 0',
          padding: '20px 0',
          borderTop: '1px solid var(--border)',
          backgroundColor: 'transparent'
        }
      default:
        return {}
    }
  }

  const getDefaultContent = (type: EmailElement['type']): string => {
    switch (type) {
      case 'text':
        return 'Welcome to our newsletter!\n\nThis is a **bold text** example and this is *italic text*.\n\nHere\'s a bullet list:\n- First item\n- Second item\n- Third item\n\nHere\'s a numbered list:\n1. First step\n2. Second step\n3. Third step\n\nHere\'s a quote:\n> This is an important quote that stands out from the rest of the content.\n\nUse the toolbar buttons above to format your text easily!'
      case 'button':
        return 'Click Here'
      case 'image':
        return 'https://via.placeholder.com/600x300'
      case 'divider':
        return ''
      case 'spacer':
        return ''
      case 'header':
        return ''
      case 'footer':
        return ''
      case 'columns':
        return '' // Columns will be containers for other elements
      default:
        return ''
    }
  }

  const getDefaultProperties = (type: EmailElement['type']) => {
    switch (type) {
      case 'text':
        return {}
      case 'button':
        return {
          text: 'Click Here',
          url: '#'
        }
      case 'image':
        return {
          src: 'https://via.placeholder.com/600x300',
          alt: 'Image',
          width: 600,
          height: 300
        }
      case 'divider':
        return {}
      case 'spacer':
        return {}
      case 'header':
        return {}
      case 'footer':
        return {}
      default:
        return {}
    }
  }

  const updateElement = (id: string, updates: Partial<EmailElement>) => {
    setElements(prev => prev.map(el => el.id === id ? { ...el, ...updates } : el))
  }

  const updateNestedElement = (parentId: string, childId: string, updates: Partial<EmailElement>) => {
    setElements(prev => prev.map(el => {
      if (el.id === parentId && el.type === 'columns') {
        return {
          ...el,
          children: el.children?.map(child => 
            child.id === childId ? { ...child, ...updates } : child
          ) || []
        }
      }
      return el
    }))
  }

  const findNestedElement = (parentId: string, childId: string): EmailElement | null => {
    const parent = elements.find(el => el.id === parentId)
    if (parent?.type === 'columns') {
      return parent.children?.find(child => child.id === childId) || null
    }
    return null
  }

  const deleteElement = (id: string) => {
    setElements(prev => prev.filter(el => el.id !== id))
  }

  const moveElement = (id: string, direction: 'up' | 'down') => {
    setElements(prev => {
      const index = prev.findIndex(el => el.id === id)
      if (index === -1) return prev
      
      const newElements = [...prev]
      if (direction === 'up' && index > 0) {
        [newElements[index], newElements[index - 1]] = [newElements[index - 1], newElements[index]]
      } else if (direction === 'down' && index < newElements.length - 1) {
        [newElements[index], newElements[index + 1]] = [newElements[index + 1], newElements[index]]
      }
      
      return newElements
    })
  }

  // Rich text formatting functions
  const handleFormat = (elementId: string, format: string) => {
    const element = elements.find(el => el.id === elementId)
    if (!element || element.type !== 'text') return

    const textarea = document.getElementById(`textarea-${elementId}`) as HTMLTextAreaElement
    if (!textarea) return

    const start = textarea.selectionStart
    const end = textarea.selectionEnd
    const selectedText = element.content.substring(start, end)
    let newText = ''

    switch (format) {
      case 'bold':
        newText = `**${selectedText}**`
        break
      case 'italic':
        newText = `*${selectedText}*`
        break
      case 'bullet-list':
        newText = selectedText.split('\n').map(line => `- ${line}`).join('\n')
        break
      case 'numbered-list':
        newText = selectedText.split('\n').map((line, index) => `${index + 1}. ${line}`).join('\n')
        break
      case 'quote':
        newText = selectedText.split('\n').map(line => `> ${line}`).join('\n')
        break
      case 'columns':
        newText = `[COLUMN_START]\n${selectedText}\n[COLUMN_END]`
        break
      default:
        return
    }

    const updatedContent = element.content.substring(0, start) + newText + element.content.substring(end)
    updateElement(elementId, { content: updatedContent })

    // Set cursor position after formatting
    setTimeout(() => {
      textarea.focus()
      textarea.setSelectionRange(start, start + newText.length)
    }, 0)
  }

  const handleAlign = (elementId: string, alignment: string) => {
    updateElement(elementId, {
      styles: { ...elements.find(el => el.id === elementId)?.styles, textAlign: alignment }
    })
  }

  // Helper function to convert basic markdown-like formatting to HTML
  const processTextContent = (content: string): string => {
    if (!content) return ''
    
    console.log('🔧 processTextContent called with:', content)
    
    let processed = content
    
    // Convert **bold** text first
    processed = processed.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
    
    // Convert *italic* text (but not if it's part of a list)
    processed = processed.replace(/\*(.*?)\*/g, '<em>$1</em>')
    
    // Convert _italic_ text
    processed = processed.replace(/_(.*?)_/g, '<em>$1</em>')
    
    // Handle columns first
    const columnRegex = /\[COLUMN_START\]\n([\s\S]*?)\n\[COLUMN_END\]/g
    processed = processed.replace(columnRegex, (match, columnContent) => {
      const processedColumnContent = processTextContent(columnContent)
      return `<div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;">${processedColumnContent}</div>`
    })
    
    // Split into lines to process lists and paragraphs
    const lines = processed.split('\n')
    const result: string[] = []
    let inList = false
    let inNumberedList = false
    let inQuote = false
    
    console.log('🔧 Processing lines:', lines)
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim()
      
      if (line === '') {
        // Empty line - end current list or quote if we're in one
        if (inList) {
          result.push('</ul>')
          inList = false
        }
        if (inNumberedList) {
          result.push('</ol>')
          inNumberedList = false
        }
        if (inQuote) {
          result.push('</blockquote>')
          inQuote = false
        }
        continue
      }
      
      // Check if this line is a numbered list item (more flexible regex)
      if (/^\d+\./.test(line)) {
        const listContent = line.replace(/^\d+\.\s*/, '')
        console.log('🔧 Found numbered list item:', line, '->', listContent)
        
        if (!inNumberedList) {
          result.push('<ol style="margin: 16px 0; padding-left: 20px;">')
          inNumberedList = true
        }
        
        result.push(`<li style="margin: 8px 0;">${listContent}</li>`)
      }
      // Check if this line is a bullet list item
      else if (line.startsWith('- ') || line.startsWith('* ')) {
        const listContent = line.substring(2) // Remove the - or *
        console.log('🔧 Found bullet list item:', line, '->', listContent)
        
        if (!inList) {
          result.push('<ul style="margin: 16px 0; padding-left: 20px;">')
          inList = true
        }
        
        result.push(`<li style="margin: 8px 0;">${listContent}</li>`)
      }
      // Check if this line is a quote
      else if (line.startsWith('> ')) {
        const quoteContent = line.substring(2)
        
        if (!inQuote) {
          result.push('<blockquote style="border-left: 4px solid #007bff; padding-left: 16px; margin: 16px 0; font-style: italic; color: #666;">')
          inQuote = true
        }
        
        result.push(`<p style="margin: 8px 0;">${quoteContent}</p>`)
      }
      else {
        // Regular text line
        if (inList) {
          result.push('</ul>')
          inList = false
        }
        if (inNumberedList) {
          result.push('</ol>')
          inNumberedList = false
        }
        if (inQuote) {
          result.push('</blockquote>')
          inQuote = false
        }
        
        // Convert single line breaks to <br> tags within paragraphs
        const lineWithBreaks = line.replace(/\n/g, '<br>')
        result.push(`<p style="margin: 8px 0;">${lineWithBreaks}</p>`)
      }
    }
    
    // Close any open lists or quotes
    if (inList) {
      result.push('</ul>')
    }
    if (inNumberedList) {
      result.push('</ol>')
    }
    if (inQuote) {
      result.push('</blockquote>')
    }
    
    const finalResult = result.join('')
    
    // Debug logging
    console.log('🔧 Text Processing Debug:')
    console.log('Original:', content)
    console.log('Processed:', finalResult)
    
    return finalResult
  }

  const generateHTML = async () => {
    // If we have processed HTML content from a loaded template, use it
    if (processedHtmlContent) {
      return processedHtmlContent
    }
    
    // Get company settings for custom footer
    let companySettings = null
    if (whopUserId) {
      try {
        const response = await fetch(`/api/company-settings?whopUserId=${whopUserId}`)
        const data = await response.json()
        if (data.success) {
          companySettings = data.settings
        }
      } catch (error) {
        console.error('Error fetching company settings:', error)
      }
    }

    const emailHTML = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Email Campaign</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            line-height: 1.6; 
            color: #333; 
            max-width: 600px; 
            margin: 0 auto; 
            padding: 20px;
        }
        .email-container {
            background: #ffffff;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .email-content {
            padding: 30px;
        }
        .button {
            display: inline-block;
            padding: 12px 24px;
            background-color: #007bff;
            color: #ffffff;
            text-decoration: none;
            border-radius: 4px;
            font-weight: bold;
        }
        .image {
            max-width: 100%;
            height: auto;
            border-radius: 4px;
        }
        .divider {
            border-top: 1px solid #e0e0e0;
            margin: 20px 0;
        }
        .spacer {
            height: 20px;
        }
        p {
            margin: 0 0 16px 0;
        }
        ul {
            margin: 0 0 16px 0;
            padding-left: 20px;
        }
        li {
            margin-bottom: 8px;
        }
        strong {
            font-weight: bold;
        }
        em {
            font-style: italic;
        }
        ol {
            margin: 0 0 16px 0;
            padding-left: 20px;
        }
        blockquote {
            border-left: 4px solid #007bff;
            padding-left: 16px;
            margin: 16px 0;
            font-style: italic;
            color: #666;
        }
        @media only screen and (max-width: 600px) {
            body { padding: 10px; }
            .email-content { padding: 20px; }
        }
    </style>
</head>
<body>
    <div class="email-container">
        <div class="email-content">
            ${elements.map(element => {
              const styles = Object.entries(element.styles)
                .map(([key, value]) => `${key}: ${value}`)
                .join('; ')
              
              switch (element.type) {
                case 'text':
                  const processedContent = processTextContent(element.content)
                  return `<div style="${styles}">${processedContent}</div>`
                case 'button':
                  const buttonStyles = Object.entries(element.styles)
                    .map(([key, value]) => `${key}: ${value}`)
                    .join('; ')
                  return `<div style="text-align: center; margin: 20px 0;">
                    <a href="${element.properties.url || '#'}" class="button" style="${buttonStyles}">
                      ${element.properties.text || 'Click Here'}
                    </a>
                  </div>`
                case 'image':
                  return `<div style="text-align: center;">
                    <img src="${element.properties.src || 'https://via.placeholder.com/600x300'}" 
                         alt="${element.properties.alt || 'Image'}" 
                         style="${styles}"
                         width="${element.properties.width || '600'}"
                         height="${element.properties.height || '300'}">
                  </div>`
                case 'divider':
                  return `<div class="divider" style="${styles}"></div>`
                case 'spacer':
                  return `<div class="spacer" style="${styles}"></div>`
                case 'header':
                  // Don't generate header content here - it will be added by the wrapper
                  return ''
                case 'footer':
                  // Don't generate footer content here - it will be added by the wrapper
                  return ''
                case 'columns':
                  return generateColumnsHTML(element)
                default:
                  return ''
              }
            }).join('')}
        </div>
    </div>
</body>
</html>`
    
    return emailHTML
  }

  const generatePreviewHTML = (): string => {
    const elementsHTML = elements.map(element => {
      const styles = Object.entries(element.styles)
        .map(([key, value]) => `${key}: ${value}`)
        .join('; ')
      
      switch (element.type) {
        case 'text':
          const processedContent = processTextContent(element.content)
          return `<div style="${styles}">${processedContent}</div>`
        case 'button':
          const buttonColor = element.properties?.color || '#007bff'
          const buttonText = element.properties?.text || element.content
          const buttonUrl = element.properties?.url || '#'
          return `<div style="${styles}"><a href="${buttonUrl}" style="display: inline-block; background-color: ${buttonColor}; color: white; padding: 12px 24px; border: none; border-radius: 4px; cursor: pointer; font-size: 16px; text-decoration: none; text-align: center;">${buttonText}</a></div>`
        case 'image':
          return `<div style="${styles}"><img src="${element.content}" alt="Email image" style="max-width: 100%; height: auto;" /></div>`
        case 'divider':
          return `<div style="${styles}"><hr style="border: none; border-top: 1px solid #e0e0e0; margin: 20px 0;" /></div>`
        case 'spacer':
          return `<div style="${styles}"><div style="height: ${element.content || '20px'};"></div></div>`
        case 'header':
          return `<div style="${styles}"><h1 style="margin: 0; padding: 20px 0; text-align: center; font-size: 24px; font-weight: bold;">${element.content}</h1></div>`
        case 'footer':
          return `<div style="${styles}"><div style="text-align: center; padding: 20px 0; color: #666; font-size: 14px;">Footer content will be generated automatically</div></div>`
        case 'columns':
          return generateColumnsHTML(element)
        default:
          return `<div style="${styles}">${element.content}</div>`
      }
    }).join('')

    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Email Preview</title>
        <style>
          body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
          }
          .email-container {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
          }
          p {
            margin: 0 0 16px 0;
          }
          ul {
            margin: 0 0 16px 0;
            padding-left: 20px;
          }
          li {
            margin-bottom: 8px;
          }
          strong {
            font-weight: bold;
          }
          em {
            font-style: italic;
          }
          ol {
            margin: 0 0 16px 0;
            padding-left: 20px;
          }
          blockquote {
            border-left: 4px solid #007bff;
            padding-left: 16px;
            margin: 16px 0;
            font-style: italic;
            color: #666;
          }
          @media only screen and (max-width: 600px) {
            body { padding: 10px; }
            .email-container { padding: 15px; }
          }
        </style>
      </head>
      <body>
        <div class="email-container">
          ${elementsHTML}
        </div>
      </body>
      </html>
    `
  }

  const generateCustomHeader = (companySettings: any) => {
    const headerStyle = companySettings?.header_customization?.header_style || {}
    const headerContent = companySettings?.header_customization?.header_content || {}
    
    const backgroundColor = headerStyle.backgroundColor || '#f8f9fa'
    const textColor = headerStyle.textColor || '#333'
    const showLogo = headerContent.showLogo ?? true
    const showCompanyName = headerContent.showCompanyName ?? true
    const customText = headerContent.customText || ''

    let headerHTML = `<div class="email-header" style="background: ${backgroundColor}; padding: 20px; text-align: center; border-bottom: 1px solid #e9ecef;">`

    // Company logo
    if (showLogo && companySettings?.company_logo_url) {
      headerHTML += `<img src="${companySettings.company_logo_url}" alt="${companySettings.company_name || 'Company Logo'}" style="max-height: 60px; margin-bottom: 10px;">`
    }

    // Company name
    if (showCompanyName && companySettings?.company_name) {
      headerHTML += `<h1 style="margin: 0; color: ${textColor}; font-size: 24px; font-weight: bold;">${companySettings.company_name}</h1>`
    }

    // Custom text
    if (customText) {
      headerHTML += `<p style="margin: 10px 0 0 0; color: ${textColor}; font-size: 16px;">${customText}</p>`
    }

    headerHTML += `</div>`
    return headerHTML
  }

  const generateCustomFooter = (companySettings: any) => {
    const linkColor = companySettings?.footer_customization?.footer_style?.linkColor || '#007bff'
    const showCompanyInfo = companySettings?.footer_customization?.footer_content?.showCompanyInfo ?? true
    const showUnsubscribeLink = companySettings?.footer_customization?.footer_content?.showUnsubscribeLink ?? true
    const showViewInBrowser = companySettings?.footer_customization?.footer_content?.showViewInBrowser ?? true
    const showPoweredBy = companySettings?.footer_customization?.footer_content?.showPoweredBy ?? false
    const customText = companySettings?.footer_customization?.footer_content?.customText || ''

    let footerContent = ''

    // Company information section
    if (showCompanyInfo && companySettings?.company_name) {
      footerContent += `
        <div style="margin-bottom: 15px;">
          <p style="margin: 0; font-size: 14px; font-weight: bold; color: #333;">${companySettings.company_name}</p>`
      
      if (companySettings.company_address) {
        footerContent += `<p style="margin: 5px 0; font-size: 12px; color: #666;">${companySettings.company_address}</p>`
      }
      
      if (companySettings.company_website || companySettings.company_email || companySettings.company_phone) {
        footerContent += `<p style="margin: 5px 0; font-size: 12px; color: #666;">`
        if (companySettings.company_website) {
          footerContent += `<a href="${companySettings.company_website}" style="color: ${linkColor}; text-decoration: none;">${companySettings.company_website}</a>`
        }
        if (companySettings.company_email) {
          if (companySettings.company_website) footerContent += ' | '
          footerContent += `<a href="mailto:${companySettings.company_email}" style="color: ${linkColor}; text-decoration: none;">${companySettings.company_email}</a>`
        }
        if (companySettings.company_phone) {
          if (companySettings.company_website || companySettings.company_email) footerContent += ' | '
          footerContent += `<a href="tel:${companySettings.company_phone}" style="color: ${linkColor}; text-decoration: none;">${companySettings.company_phone}</a>`
        }
        footerContent += `</p>`
      }
      
      footerContent += `</div>`
    }

    // Copyright and custom text
    footerContent += `
      <div style="margin-bottom: 15px; font-size: 12px; color: #666;">
        <p style="margin: 5px 0;">© ${new Date().getFullYear()} ${companySettings?.company_name || 'Email Marketing by Whop'}. All rights reserved.</p>
        <p style="margin: 5px 0;">You received this email because you're a member of our community.</p>`
    
    if (customText) {
      footerContent += `<p style="margin: 5px 0;">${customText}</p>`
    }
    
    footerContent += `</div>`

    // Links section
    const links = []
    if (showUnsubscribeLink) links.push(`<a href="#" style="color: ${linkColor}; text-decoration: none;">Unsubscribe</a>`)
    if (showViewInBrowser) links.push(`<a href="#" style="color: ${linkColor}; text-decoration: none;">View in browser</a>`)
    if (showPoweredBy) links.push(`<a href="https://whop.com" style="color: ${linkColor}; text-decoration: none;">Powered by Email Marketing</a>`)

    if (links.length > 0) {
      footerContent += `
        <div style="border-top: 1px solid ${companySettings?.footer_customization?.footer_style?.borderColor || '#e0e0e0'}; padding-top: 15px; font-size: 11px; color: #999;">
          <p style="margin: 5px 0;">${links.join(' | ')}</p>
        </div>`
    }

    return `<div class="email-footer">${footerContent}</div>`
  }

  const generateText = () => {
    const content = elements
      .map(element => {
        switch (element.type) {
          case 'text':
            // Process text content for plain text formatting
            let textContent = element.content
            
            // Convert **bold** to plain text (keep as is for plain text)
            textContent = textContent.replace(/\*\*(.*?)\*\*/g, '$1')
            
            // Convert *italic* to plain text (keep as is for plain text)
            textContent = textContent.replace(/\*(.*?)\*/g, '$1')
            
            // Convert _italic_ to plain text (keep as is for plain text)
            textContent = textContent.replace(/_(.*?)_/g, '$1')
            
            // Convert lists to plain text format
            textContent = textContent
              .split('\n')
              .map(line => {
                if (line.trim().startsWith('- ') || line.trim().startsWith('* ')) {
                  return `• ${line.trim().substring(2)}`
                }
                return line
              })
              .join('\n')
            
            return textContent
          case 'button':
            return `${element.properties.text || 'Click Here'}: ${element.properties.url || '#'}`
          case 'image':
            return `[Image: ${element.properties.alt || 'Image'}]`
          case 'divider':
            return '---'
          case 'spacer':
            return ''
          case 'header':
            // Don't include header content in text - it will be added by wrapper
            return ''
          case 'footer':
            // Don't include footer content in text - it will be added by wrapper
            return ''
          case 'columns':
            return generateColumnsText(element)
          default:
            return ''
        }
      })
      .filter(text => text.trim())
      .join('\n\n')
    
    // Don't add footer to plain text version - it will be added by wrapper
    return content
  }

  const handleSend = async () => {
    if (!whopUserId) return
    
    // Validate audience selection
    if (!selectedAudienceId && availableAudiences.length > 0) {
      onSend({
        subject: '',
        html: '',
        text: '',
        error: 'Please select an audience to send to'
      })
      return
    }
    
    // Check plan limits before sending
    try {
      const { checkEmailPlanLimit } = await import('@/app/actions/emailsync')
      
      // Get the number of contacts from the selected audience
      const selectedAudience = availableAudiences.find(aud => aud.id === selectedAudienceId)
      const contactCount = selectedAudience?.member_count || 1000 // Default fallback
      
      const planCheck = await checkEmailPlanLimit(whopUserId, contactCount)
      
      if (!planCheck.canSend) {
        // Show error in parent component
        onSend({
          subject: '',
          html: '',
          text: '',
          error: planCheck.error
        })
        return
      }
    } catch (error) {
      console.error('Error checking plan limits:', error)
    }
    
    const html = await generateHTML()
    const text = generateText()
    
    // Debug logging to verify content
    console.log('📧 Email Content Generated:')
    console.log('HTML Length:', html.length)
    console.log('Text Length:', text.length)
    console.log('HTML Preview:', html.substring(0, 200) + '...')
    console.log('Text Preview:', text.substring(0, 200) + '...')
    
    const scheduledAt = formatScheduledTime()
    console.log('📅 Scheduling info:', {
      scheduleType,
      presetSchedule,
      scheduledDate,
      scheduledTime,
      scheduledAt
    })
    
    onSend({ 
      subject, 
      html, 
      text, 
      selectedAudienceId,
      scheduledAt,
      emailWidth
    })
  }

  const copyHTML = async () => {
    const html = await generatePreviewHTML()
    navigator.clipboard.writeText(html)
  }

  // Template functions
  useEffect(() => {
    if (whopUserId) {
      loadTemplates()
    }
  }, [whopUserId])

  const loadTemplates = async () => {
    if (!whopUserId) return
    
    try {
      setLoading(true)
      const { getUserEmailTemplates } = await import('@/app/actions/emailsync')
      const result = await getUserEmailTemplates(whopUserId)
      
      if (result.success && result.templates) {
        setTemplates(result.templates)
      }
    } catch (error) {
      console.error('Error loading templates:', error)
    } finally {
      setLoading(false)
    }
  }

  const saveTemplate = async () => {
    if (!whopUserId || !templateName.trim()) return
    
    try {
      setLoading(true)
      const { saveEmailTemplate } = await import('@/app/actions/emailsync')
      
      // Filter out header and footer elements when saving template (these are generated dynamically)
      const templateElements = elements.filter(element => element.type !== 'footer' && element.type !== 'header')
      
      const result = await saveEmailTemplate(whopUserId, {
        name: templateName,
        description: templateDescription,
        category: templateCategory,
        subject: subject,
        elements: templateElements,
        tags: []
      })
      
      if (result.success) {
        setShowSaveDialog(false)
        setTemplateName('')
        setTemplateDescription('')
        await loadTemplates() // Refresh templates list
      }
    } catch (error) {
      console.error('Error saving template:', error)
    } finally {
      setLoading(false)
    }
  }

  const editTemplate = async () => {
    if (!editingTemplateId || !editingTemplateName.trim()) return
    
    try {
      setLoading(true)
      const { updateEmailTemplate } = await import('@/app/actions/emailsync')
      
      // Filter out header and footer elements when updating template (these are generated dynamically)
      const templateElements = elements.filter(element => element.type !== 'footer' && element.type !== 'header')
      
      const result = await updateEmailTemplate(editingTemplateId, {
        name: editingTemplateName,
        description: editingTemplateDescription,
        category: editingTemplateCategory,
        subject: subject,
        elements: templateElements
      })
      
      if (result.success) {
        setShowEditDialog(false)
        setEditingTemplateId(null)
        setEditingTemplateName('')
        setEditingTemplateDescription('')
        await loadTemplates() // Refresh templates list
      }
    } catch (error) {
      console.error('Error updating template:', error)
    } finally {
      setLoading(false)
    }
  }

  const openEditDialog = (template: any) => {
    setEditingTemplateId(template.id)
    setEditingTemplateName(template.name)
    setEditingTemplateDescription(template.description || '')
    setEditingTemplateCategory(template.category || 'general')
    setShowEditDialog(true)
  }

  const loadTemplate = async (templateId: string) => {
    try {
      setLoading(true)
      const { loadEmailTemplate } = await import('@/app/actions/emailsync')
      const result = await loadEmailTemplate(templateId, whopUserId)
      
      if (result.success && result.template) {
        const template = result.template
        setSubject(template.subject)
        
        // Use the processed HTML content if available, otherwise fall back to elements
        if (template.html_content) {
          // If we have processed HTML content, we need to extract elements from it
          // For now, let's use the elements array but ensure the HTML generation uses the processed content
          setElements(template.elements || [])
          // Store the processed HTML content for use in generateHTML
          setProcessedHtmlContent(template.html_content)
        } else {
          setElements(template.elements || [])
          setProcessedHtmlContent(null)
        }
        
        // Automatically add header and footer elements if they don't exist
        const hasHeader = (template.elements || []).some((element: EmailElement) => element.type === 'header')
        const hasFooter = (template.elements || []).some((element: EmailElement) => element.type === 'footer')
        
        if (!hasHeader) {
          const headerElement: EmailElement = {
            id: Date.now().toString(),
            type: 'header',
            content: 'Header content will be generated automatically',
            styles: getDefaultStyles('header'),
            properties: {}
          }
          setElements(prev => [headerElement, ...prev])
        }
        
        if (!hasFooter) {
          const footerElement: EmailElement = {
            id: (Date.now() + 1).toString(),
            type: 'footer',
            content: 'Footer content will be generated automatically',
            styles: getDefaultStyles('footer'),
            properties: {}
          }
          setElements(prev => [...prev, footerElement])
        }
        
        setShowLoadDialog(false)
      }
    } catch (error) {
      console.error('Error loading template:', error)
    } finally {
      setLoading(false)
    }
  }

  const deleteTemplate = async (templateId: string) => {
    try {
      const { deleteEmailTemplate } = await import('@/app/actions/emailsync')
      const result = await deleteEmailTemplate(templateId)
      
      if (result.success) {
        await loadTemplates() // Refresh templates list
      }
    } catch (error) {
      console.error('Error deleting template:', error)
    }
  }

  const duplicateTemplate = async (templateId: string) => {
    if (!whopUserId) return
    
    try {
      const { duplicateEmailTemplate } = await import('@/app/actions/emailsync')
      const result = await duplicateEmailTemplate(whopUserId, templateId)
      
      if (result.success) {
        await loadTemplates() // Refresh templates list
      }
    } catch (error) {
      console.error('Error duplicating template:', error)
    }
  }

  const selectedElementData = elements.find(el => el.id === selectedElement)

  const availableElements = [
    { type: 'text' as const, label: 'Text', icon: Type },
    { type: 'button' as const, label: 'Button', icon: Square },
    { type: 'image' as const, label: 'Image', icon: ImageIcon },
    { type: 'divider' as const, label: 'Divider', icon: Minus },
    { type: 'spacer' as const, label: 'Spacer', icon: Move },
    { type: 'columns' as const, label: 'Two Columns', icon: Columns },
    { type: 'header' as const, label: 'Header', icon: Star },
    { type: 'footer' as const, label: 'Footer', icon: Star }
  ]

  const generateColumnsText = (element: EmailElement): string => {
    const content = element.content || ''
    const parts = content.split('\n\n---\n\n')
    
    if (parts.length >= 2) {
      const leftContent = parts[0].replace(/^Left Column Content\n\n/, '').replace(/\n- /g, '\n• ')
      const rightContent = parts[1].replace(/^Right Column Content\n\n/, '').replace(/\n\d+\. /g, '\n• ')
      return `LEFT COLUMN:\n${leftContent}\n\nRIGHT COLUMN:\n${rightContent}`
    }
    
    return content
  }

  const generateColumnsHTML = (element: EmailElement): string => {
    const leftColumnElements = element.children?.filter((_, index) => index % 2 === 0) || []
    const rightColumnElements = element.children?.filter((_, index) => index % 2 === 1) || []
    
    const renderElementHTML = (el: EmailElement): string => {
      const styles = Object.entries(el.styles)
        .map(([key, value]) => `${key}: ${value}`)
        .join('; ')
      
      switch (el.type) {
        case 'text':
          const processedContent = processTextContent(el.content)
          return `<div style="${styles}">${processedContent}</div>`
        case 'button':
          return `<div style="text-align: center; margin: 10px 0;">
            <button style="background-color: #007bff; color: white; padding: 12px 24px; border: none; border-radius: 4px; cursor: pointer; font-size: 16px; font-weight: bold;">
              ${el.content}
            </button>
          </div>`
        case 'image':
          return `<div style="text-align: center; margin: 10px 0;">
            <img src="${el.content}" alt="Email image" style="max-width: 100%; height: auto; border-radius: 4px;" />
          </div>`
        case 'divider':
          return `<div style="border-top: 1px solid #e0e0e0; margin: 10px 0;"></div>`
        case 'spacer':
          return `<div style="height: ${el.content || '10px'};"></div>`
        case 'header':
          return `<div style="text-align: center; padding: 10px 0; font-size: 20px; font-weight: bold;">${el.content}</div>`
        default:
          return `<div style="${styles}">${el.content}</div>`
      }
    }
    
    const leftColumnHTML = leftColumnElements.map(renderElementHTML).join('')
    const rightColumnHTML = rightColumnElements.map(renderElementHTML).join('')
    
    return `
      <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0; max-width: 100%;">
        <div style="padding: 0;">
          ${leftColumnHTML || '<div style="padding: 20px; text-align: center; color: #666; border: 2px dashed #ddd; border-radius: 4px;">Left Column<br/>Add elements here</div>'}
        </div>
        <div style="padding: 0;">
          ${rightColumnHTML || '<div style="padding: 20px; text-align: center; color: #666; border: 2px dashed #ddd; border-radius: 4px;">Right Column<br/>Add elements here</div>'}
        </div>
      </div>
    `
  }

  // Create nested element panel
  let nestedElementPanel = null
  if (selectedNestedElement) {
    const nestedElement = findNestedElement(selectedNestedElement.parentId, selectedNestedElement.childId)
    if (nestedElement) {
      nestedElementPanel = (
        <div className="p-6 border-b border-border">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-sm font-medium">
              Properties - {nestedElement.type.charAt(0).toUpperCase() + nestedElement.type.slice(1)} (Nested)
            </h3>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setSelectedNestedElement(null)}
            >
              ×
            </Button>
          </div>
          
          {nestedElement.type === 'text' && (
            <div>
              <Label>Content</Label>
              <Textarea
                value={nestedElement.content}
                onChange={(e) => updateNestedElement(selectedNestedElement.parentId, selectedNestedElement.childId, { content: e.target.value })}
                rows={3}
                className="mt-2"
                placeholder="Enter your text here... Use the toolbar buttons above for easy formatting!"
              />
              <RichTextToolbar
                onFormat={(format) => {
                  // Handle formatting for nested text elements
                  const textarea = document.getElementById(`nested-textarea-${nestedElement.id}`) as HTMLTextAreaElement
                  if (!textarea) return

                  const start = textarea.selectionStart
                  const end = textarea.selectionEnd
                  const selectedText = nestedElement.content.substring(start, end)
                  let newText = ''

                  switch (format) {
                    case 'bold':
                      newText = `**${selectedText}**`
                      break
                    case 'italic':
                      newText = `*${selectedText}*`
                      break
                    case 'bullet-list':
                      newText = selectedText.split('\n').map(line => `- ${line}`).join('\n')
                      break
                    case 'numbered-list':
                      newText = selectedText.split('\n').map((line, index) => `${index + 1}. ${line}`).join('\n')
                      break
                    case 'quote':
                      newText = selectedText.split('\n').map(line => `> ${line}`).join('\n')
                      break
                    default:
                      return
                  }

                  const updatedContent = nestedElement.content.substring(0, start) + newText + nestedElement.content.substring(end)
                  updateNestedElement(selectedNestedElement.parentId, selectedNestedElement.childId, { content: updatedContent })
                }}
                onAlign={(alignment) => updateNestedElement(selectedNestedElement.parentId, selectedNestedElement.childId, {
                  styles: { ...nestedElement.styles, textAlign: alignment }
                })}
                currentAlignment={nestedElement.styles.textAlign}
              />
            </div>
          )}
          
          {nestedElement.type === 'button' && (
            <div>
              <Label>Button Text</Label>
              <Input
                value={nestedElement.content}
                onChange={(e) => updateNestedElement(selectedNestedElement.parentId, selectedNestedElement.childId, { content: e.target.value })}
                className="mt-2"
                placeholder="Enter button text..."
              />
            </div>
          )}
          
          {nestedElement.type === 'image' && (
            <div>
              <Label>Image URL</Label>
              <Input
                value={nestedElement.content}
                onChange={(e) => updateNestedElement(selectedNestedElement.parentId, selectedNestedElement.childId, { content: e.target.value })}
                className="mt-2"
                placeholder="Enter image URL..."
              />
            </div>
          )}
          
          {nestedElement.type === 'header' && (
            <div>
              <Label>Header Text</Label>
              <Input
                value={nestedElement.content}
                onChange={(e) => updateNestedElement(selectedNestedElement.parentId, selectedNestedElement.childId, { content: e.target.value })}
                className="mt-2"
                placeholder="Enter header text..."
              />
            </div>
          )}
          
          {nestedElement.type === 'spacer' && (
            <div>
              <Label>Height (px)</Label>
              <Input
                value={nestedElement.content}
                onChange={(e) => updateNestedElement(selectedNestedElement.parentId, selectedNestedElement.childId, { content: e.target.value })}
                className="mt-2"
                placeholder="Enter height in pixels..."
              />
            </div>
          )}
        </div>
      )
    }
  }

  return (
    <div className="flex flex-col lg:flex-row h-full bg-background max-h-screen">
      {/* Left Panel - Design Tools */}
      <div className="w-full lg:w-80 xl:w-96 bg-card border-b lg:border-b-0 lg:border-r border-border flex flex-col max-h-[50vh] lg:max-h-full overflow-hidden">
        {/* Header */}
        <div className="p-3 lg:p-4 border-b border-border flex-shrink-0">
          <div className="flex items-center justify-between">
            <h2 className="text-lg lg:text-xl font-semibold">Email Designer</h2>
            <div className="flex items-center gap-1 lg:gap-2">
              {whopUserId && (
                <>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setShowLoadDialog(true)}
                    disabled={loading}
                    className="h-8 px-2 lg:px-3"
                  >
                    <FolderOpen className="h-3 w-3 lg:h-4 lg:w-4 lg:mr-1" />
                    <span className="hidden lg:inline">Templates</span>
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setShowSaveDialog(true)}
                    disabled={loading || elements.length === 0}
                    className="h-8 px-2 lg:px-3"
                  >
                    <Save className="h-3 w-3 lg:h-4 lg:w-4 lg:mr-1" />
                    <span className="hidden lg:inline">Save</span>
                  </Button>
                </>
              )}
              <Button
                variant="outline"
                size="sm"
                onClick={() => setPreviewMode(!previewMode)}
                className="h-8 px-2 lg:px-3"
              >
                <Eye className="h-3 w-3 lg:h-4 lg:w-4 lg:mr-1" />
                <span className="hidden lg:inline">{previewMode ? 'Design' : 'Preview'}</span>
              </Button>
            </div>
          </div>
        </div>

        {!previewMode && (
          <div className="flex-1 overflow-y-auto min-h-0">
            {/* Subject Line */}
            <div className="p-3 lg:p-4 border-b border-border">
              <div className="flex items-center justify-between">
                <Label htmlFor="subject" className="text-sm font-medium">Subject Line</Label>
                <Button
                  type="button"
                  variant="ghost"
                  size="sm"
                  onClick={() => setShowTemplateVariables(!showTemplateVariables)}
                  className="h-6 px-2 text-xs"
                >
                  <HelpCircle className="h-3 w-3 mr-1" />
                  Template Variables
                  {showTemplateVariables ? <ChevronUp className="h-3 w-3 ml-1" /> : <ChevronDown className="h-3 w-3 ml-1" />}
                </Button>
              </div>
              <Input
                id="subject"
                value={subject}
                onChange={(e) => {
                  setSubject(e.target.value)
                  // Clear processed HTML content when user edits subject
                  setProcessedHtmlContent(null)
                }}
                placeholder="Enter email subject..."
                className="mt-2"
              />
            </div>

            <Dialog open={showTemplateVariables} onOpenChange={setShowTemplateVariables}>
              <DialogContent className="max-w-md">
                <DialogHeader>
                  <DialogTitle className="flex items-center gap-2">
                    <HelpCircle className="h-4 w-4" />
                    Template Variables
                  </DialogTitle>
                </DialogHeader>
                <div className="space-y-4">
                  <div className="grid grid-cols-1 gap-2 text-sm">
                    <div className="flex items-center justify-between">
                      <code className="bg-muted px-2 py-1 rounded text-xs font-mono">{"{{first_name}}"}</code>
                      <span className="text-muted-foreground">First name (with fallback)</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <code className="bg-muted px-2 py-1 rounded text-xs font-mono">{"{{last_name}}"}</code>
                      <span className="text-muted-foreground">Last name</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <code className="bg-muted px-2 py-1 rounded text-xs font-mono">{"{{email}}"}</code>
                      <span className="text-muted-foreground">Email address</span>
                    </div>
                  </div>
                  <div className="text-xs text-muted-foreground p-3 bg-muted rounded-lg">
                    <strong>Example:</strong> "Hello {'{{first_name}}'}! Your email is {'{{email}}'}!"
                  </div>
                  <div className="text-xs text-blue-600 p-3 bg-blue-50 rounded-lg">
                    <strong>💡 How it works:</strong> Variables convert to Resend merge tags with fallbacks. If no first name exists, it shows "there" instead. Example: "Hello {{{FIRST_NAME|there}}}, welcome!"
                  </div>
                </div>
              </DialogContent>
            </Dialog>

            {/* Audience Selection */}
            {availableAudiences.length > 0 && (
              <div className="p-3 lg:p-4 border-b border-border">
                <Label htmlFor="audience" className="text-sm font-medium">Send To Audience</Label>
                <Select value={selectedAudienceId} onValueChange={setSelectedAudienceId}>
                  <SelectTrigger className="mt-2">
                    <SelectValue placeholder="Select an audience to send to..." />
                  </SelectTrigger>
                  <SelectContent>
                    {availableAudiences.map((audience) => (
                      <SelectItem key={audience.id} value={audience.id}>
                        {audience.name} ({audience.member_count} members)
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {selectedAudienceId && (
                  <p className="text-xs text-muted-foreground mt-2">
                    This campaign will be sent to {availableAudiences.find(aud => aud.id === selectedAudienceId)?.member_count || 0} recipients
                  </p>
                )}
              </div>
            )}

            {/* Email Width Settings */}
            <div className="p-3 lg:p-4 border-b border-border">
              <EmailWidthSelector
                selectedWidth={emailWidth}
                onWidthChange={setEmailWidth}
              />
            </div>

            {/* Add Elements */}
            <div className="p-3 lg:p-4 border-b border-border">
              <h3 className="text-sm font-medium mb-3">Add Elements</h3>
              <div className="grid grid-cols-2 gap-2 lg:gap-3">
                {availableElements.map((element) => {
                  const IconComponent = element.icon
                  return (
                    <Button
                      key={element.type}
                      variant="outline"
                      size="sm"
                      onClick={() => addElement(element.type)}
                      className="flex items-center gap-1 lg:gap-2 h-8 lg:h-10 text-xs lg:text-sm"
                    >
                      <IconComponent className="h-3 w-3 lg:h-4 lg:w-4" />
                      <span className="hidden sm:inline">{element.label}</span>
                    </Button>
                  )
                })}
              </div>
            </div>

            {/* Elements List */}
            <div className="p-6 border-b border-border">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-sm font-medium">Elements ({elements.length})</h3>
                {elements.length === 0 && (
                  <span className="text-xs text-muted-foreground">No elements yet</span>
                )}
              </div>
              
              {elements.length === 0 ? (
                <div className="text-center py-12 text-muted-foreground">
                  <Type className="h-12 w-12 mx-auto mb-3 opacity-50" />
                  <p className="text-sm font-medium mb-1">No elements added yet</p>
                  <p className="text-xs">Click the buttons above to add elements</p>
                </div>
              ) : (
                <div className="space-y-3">
                  {elements.map((element, index) => (
                    <div
                      key={element.id}
                      className={`p-4 border rounded-lg cursor-pointer transition-colors ${
                        selectedElement === element.id
                          ? 'border-primary bg-primary/10'
                          : 'border-border hover:border-border/80'
                      }`}
                      onClick={() => setSelectedElement(element.id)}
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          {element.type === 'text' && <Type className="h-4 w-4" />}
                          {element.type === 'button' && <Square className="h-4 w-4" />}
                          {element.type === 'image' && <ImageIcon className="h-4 w-4" />}
                          {element.type === 'divider' && <Minus className="h-4 w-4" />}
                          {element.type === 'spacer' && <Move className="h-4 w-4" />}
                          {element.type === 'footer' && <Type className="h-4 w-4" />}
                          {element.type === 'header' && <AlignCenter className="h-4 w-4" />}
                          {element.type === 'columns' && <Columns className="h-4 w-4" />}
                          <span className="text-sm font-medium">
                            {element.type.charAt(0).toUpperCase() + element.type.slice(1)} {index + 1}
                          </span>
                        </div>
                        <div className="flex items-center gap-1">
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={(e) => {
                              e.stopPropagation()
                              moveElement(element.id, 'up')
                            }}
                            disabled={index === 0}
                          >
                            ↑
                          </Button>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={(e) => {
                              e.stopPropagation()
                              moveElement(element.id, 'down')
                            }}
                            disabled={index === elements.length - 1}
                          >
                            ↓
                          </Button>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={(e) => {
                              e.stopPropagation()
                              deleteElement(element.id)
                            }}
                          >
                            <Trash2 className="h-3 w-3" />
                          </Button>
                        </div>
                      </div>
                      {element.type === 'text' && (
                        <p className="text-xs text-muted-foreground mt-2 truncate">
                          {element.content || 'Empty text'}
                        </p>
                      )}
                      {element.type === 'button' && (
                        <p className="text-xs text-muted-foreground mt-2">
                          {element.properties?.text || 'Click Here'} → {element.properties?.url || '#'}
                        </p>
                      )}
                      {element.type === 'image' && (
                        <p className="text-xs text-muted-foreground mt-2">
                          {element.properties?.alt || 'Image'} ({element.properties?.width || 600}x{element.properties?.height || 300})
                        </p>
                      )}
                      {element.type === 'divider' && (
                        <p className="text-xs text-muted-foreground mt-2">
                          Horizontal line
                        </p>
                      )}
                      {element.type === 'spacer' && (
                        <p className="text-xs text-muted-foreground mt-2">
                          {element.styles?.height || '20px'} spacing
                        </p>
                      )}
                      {element.type === 'footer' && (
                        <p className="text-xs text-muted-foreground mt-2">
                          Footer content
                        </p>
                      )}
                      {element.type === 'header' && (
                        <p className="text-xs text-muted-foreground mt-2">
                          Header content
                        </p>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </div>

            {/* Properties Panel */}
            {selectedElementData && (
              <div className="p-3 lg:p-4 border-t border-border">
                <div className="flex items-center justify-between mb-3">
                  <h3 className="text-sm font-medium">
                    Properties - {selectedElementData.type.charAt(0).toUpperCase() + selectedElementData.type.slice(1)}
                  </h3>
                  <Badge variant="outline" className="text-xs">
                    {elements.findIndex(el => el.id === selectedElementData.id) + 1} of {elements.length}
                  </Badge>
                </div>

                {selectedElementData.type === 'text' && (
                  <div className="space-y-3">
                    <div>
                      <Label>Content</Label>
                      <Textarea
                        id={`textarea-${selectedElementData.id}`}
                        value={selectedElementData.content}
                        onChange={(e) => updateElement(selectedElementData.id, { content: e.target.value })}
                        rows={3}
                        className="mt-2"
                        placeholder="Enter your text here... Use the toolbar buttons above for easy formatting!"
                      />
                      <RichTextToolbar
                        onFormat={(format) => handleFormat(selectedElementData.id, format)}
                        onAlign={(alignment) => handleAlign(selectedElementData.id, alignment)}
                        currentAlignment={selectedElementData.styles.textAlign}
                      />
                      <div className="mt-2 text-xs text-muted-foreground">
                        <p className="font-medium mb-1">💡 Use toolbar for formatting, select text for Bold/Italic</p>
                      </div>
                    </div>
                    <div className="grid grid-cols-2 gap-3">
                      <div>
                        <Label>Font Size</Label>
                        <Select
                          value={selectedElementData.styles.fontSize}
                          onValueChange={(value) => updateElement(selectedElementData.id, {
                            styles: { ...selectedElementData.styles, fontSize: value }
                          })}
                        >
                          <SelectTrigger className="mt-2">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="12px">12px</SelectItem>
                            <SelectItem value="14px">14px</SelectItem>
                            <SelectItem value="16px">16px</SelectItem>
                            <SelectItem value="18px">18px</SelectItem>
                            <SelectItem value="20px">20px</SelectItem>
                            <SelectItem value="24px">24px</SelectItem>
                            <SelectItem value="28px">28px</SelectItem>
                            <SelectItem value="32px">32px</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <Label>Color</Label>
                        <Input
                          type="color"
                          value={selectedElementData.styles.color}
                          onChange={(e) => updateElement(selectedElementData.id, {
                            styles: { ...selectedElementData.styles, color: e.target.value }
                          })}
                          className="mt-2 h-10"
                        />
                      </div>
                    </div>
                    <div>
                      <Label>Alignment</Label>
                      <div className="flex gap-2 mt-2">
                        <Button
                          variant={selectedElementData.styles.textAlign === 'left' ? 'default' : 'outline'}
                          size="sm"
                          onClick={() => handleAlign(selectedElementData.id, 'left')}
                        >
                          <AlignLeft className="h-4 w-4" />
                        </Button>
                        <Button
                          variant={selectedElementData.styles.textAlign === 'center' ? 'default' : 'outline'}
                          size="sm"
                          onClick={() => handleAlign(selectedElementData.id, 'center')}
                        >
                          <AlignCenter className="h-4 w-4" />
                        </Button>
                        <Button
                          variant={selectedElementData.styles.textAlign === 'right' ? 'default' : 'outline'}
                          size="sm"
                          onClick={() => handleAlign(selectedElementData.id, 'right')}
                        >
                          <AlignRight className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  </div>
                )}

                {selectedElementData.type === 'button' && (
                  <div className="space-y-3">
                    <div>
                      <Label>Button Text</Label>
                      <Input
                        value={selectedElementData.properties.text || selectedElementData.content || ''}
                        onChange={(e) => updateElement(selectedElementData.id, {
                          content: e.target.value,
                          properties: { ...selectedElementData.properties, text: e.target.value }
                        })}
                        className="mt-2"
                      />
                    </div>
                    <div>
                      <Label>URL</Label>
                      <Input
                        value={selectedElementData.properties.url || ''}
                        onChange={(e) => updateElement(selectedElementData.id, {
                          properties: { ...selectedElementData.properties, url: e.target.value }
                        })}
                        className="mt-2"
                      />
                    </div>
                    <div>
                      <Label>Color</Label>
                      <Input
                        type="color"
                        value={selectedElementData.properties.color || '#007bff'}
                        onChange={(e) => updateElement(selectedElementData.id, {
                          properties: { ...selectedElementData.properties, color: e.target.value },
                          styles: { ...selectedElementData.styles, backgroundColor: e.target.value }
                        })}
                        className="mt-2 h-10"
                      />
                    </div>
                  </div>
                )}

                {selectedElementData.type === 'image' && (
                  <div className="space-y-4">
                    <div>
                      <Label>Image URL</Label>
                      <Input
                        value={selectedElementData.properties.src || ''}
                        onChange={(e) => updateElement(selectedElementData.id, {
                          properties: { ...selectedElementData.properties, src: e.target.value }
                        })}
                        className="mt-2"
                      />
                    </div>
                    <div>
                      <Label>Alt Text</Label>
                      <Input
                        value={selectedElementData.properties.alt || ''}
                        onChange={(e) => updateElement(selectedElementData.id, {
                          properties: { ...selectedElementData.properties, alt: e.target.value }
                        })}
                        className="mt-2"
                      />
                    </div>
                    <div className="grid grid-cols-2 gap-3">
                      <div>
                        <Label>Width</Label>
                        <Input
                          type="number"
                          value={selectedElementData.properties.width || 600}
                          onChange={(e) => updateElement(selectedElementData.id, {
                            properties: { ...selectedElementData.properties, width: e.target.value }
                          })}
                          className="mt-2"
                        />
                      </div>
                      <div>
                        <Label>Height</Label>
                        <Input
                          type="number"
                          value={selectedElementData.properties.height || 300}
                          onChange={(e) => updateElement(selectedElementData.id, {
                            properties: { ...selectedElementData.properties, height: e.target.value }
                          })}
                          className="mt-2"
                        />
                      </div>
                    </div>
                  </div>
                )}

                {selectedElementData.type === 'columns' && (
                  <div>
                    <div className="mb-4">
                      <h4 className="text-sm font-medium mb-2">Two Columns Layout</h4>
                      <p className="text-xs text-muted-foreground mb-3">
                        Add elements to each column. Elements will be distributed alternately between left and right columns.
                      </p>
                    </div>
                    
                    {/* Left Column */}
                    <div className="mb-4">
                      <div className="flex items-center justify-between mb-2">
                        <Label className="text-sm font-medium">Left Column</Label>
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button variant="outline" size="sm">
                              <Type className="h-3 w-3 mr-1" />
                              Add Element
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent>
                            <DropdownMenuItem onClick={() => addElementToColumn(selectedElementData.id, 'text')}>
                              <Type className="h-4 w-4 mr-2" />
                              Text
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => addElementToColumn(selectedElementData.id, 'button')}>
                              <Square className="h-4 w-4 mr-2" />
                              Button
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => addElementToColumn(selectedElementData.id, 'image')}>
                              <ImageIcon className="h-4 w-4 mr-2" />
                              Image
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => addElementToColumn(selectedElementData.id, 'header')}>
                              <Star className="h-4 w-4 mr-2" />
                              Header
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => addElementToColumn(selectedElementData.id, 'divider')}>
                              <Minus className="h-4 w-4 mr-2" />
                              Divider
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => addElementToColumn(selectedElementData.id, 'spacer')}>
                              <Move className="h-4 w-4 mr-2" />
                              Spacer
                            </DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </div>
                      
                      <div className="border rounded-lg p-3 bg-muted/30 min-h-[100px]">
                        {selectedElementData.children?.filter((_, index) => index % 2 === 0).length === 0 ? (
                          <div className="text-center text-muted-foreground text-sm py-8">
                            <Type className="h-8 w-8 mx-auto mb-2 opacity-50" />
                            <p>No elements in left column</p>
                            <p className="text-xs">Click "Add Element" to get started</p>
                          </div>
                        ) : (
                          <div className="space-y-2">
                            {selectedElementData.children?.filter((_, index) => index % 2 === 0).map((child, index) => (
                              <div 
                                key={child.id} 
                                className="flex items-center gap-2 p-2 bg-background rounded border cursor-pointer hover:bg-accent" 
                                onClick={() => setSelectedNestedElement({parentId: selectedElementData.id, childId: child.id})}
                              >
                                {child.type === 'text' && <Type className="h-3 w-3" />}
                                {child.type === 'button' && <Square className="h-3 w-3" />}
                                {child.type === 'image' && <ImageIcon className="h-3 w-3" />}
                                {child.type === 'header' && <Star className="h-3 w-3" />}
                                {child.type === 'divider' && <Minus className="h-3 w-3" />}
                                {child.type === 'spacer' && <Move className="h-3 w-3" />}
                                <span className="text-xs flex-1 truncate">
                                  {child.type.charAt(0).toUpperCase() + child.type.slice(1)} {index + 1}
                                </span>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={(e) => {
                                    e.stopPropagation()
                                    // Remove element from column
                                    setElements(prev => prev.map(el => {
                                      if (el.id === selectedElementData.id) {
                                        return {
                                          ...el,
                                          children: el.children?.filter(c => c.id !== child.id) || []
                                        }
                                      }
                                      return el
                                    }))
                                  }}
                                  className="h-6 w-6 p-0"
                                >
                                  <Trash2 className="h-3 w-3" />
                                </Button>
                              </div>
                            ))}
                          </div>
                        )}
                      </div>
                    </div>
                    
                    {/* Right Column */}
                    <div className="mb-4">
                      <div className="flex items-center justify-between mb-2">
                        <Label className="text-sm font-medium">Right Column</Label>
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button variant="outline" size="sm">
                              <Type className="h-3 w-3 mr-1" />
                              Add Element
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent>
                            <DropdownMenuItem onClick={() => addElementToColumn(selectedElementData.id, 'text')}>
                              <Type className="h-4 w-4 mr-2" />
                              Text
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => addElementToColumn(selectedElementData.id, 'button')}>
                              <Square className="h-4 w-4 mr-2" />
                              Button
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => addElementToColumn(selectedElementData.id, 'image')}>
                              <ImageIcon className="h-4 w-4 mr-2" />
                              Image
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => addElementToColumn(selectedElementData.id, 'header')}>
                              <Star className="h-4 w-4 mr-2" />
                              Header
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => addElementToColumn(selectedElementData.id, 'divider')}>
                              <Minus className="h-4 w-4 mr-2" />
                              Divider
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => addElementToColumn(selectedElementData.id, 'spacer')}>
                              <Move className="h-4 w-4 mr-2" />
                              Spacer
                            </DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </div>
                      
                      <div className="border rounded-lg p-3 bg-muted/30 min-h-[100px]">
                        {selectedElementData.children?.filter((_, index) => index % 2 === 1).length === 0 ? (
                          <div className="text-center text-muted-foreground text-sm py-8">
                            <Type className="h-8 w-8 mx-auto mb-2 opacity-50" />
                            <p>No elements in right column</p>
                            <p className="text-xs">Click "Add Element" to get started</p>
                          </div>
                        ) : (
                          <div className="space-y-2">
                            {selectedElementData.children?.filter((_, index) => index % 2 === 1).map((child, index) => (
                              <div 
                                key={child.id} 
                                className="flex items-center gap-2 p-2 bg-background rounded border cursor-pointer hover:bg-accent" 
                                onClick={() => setSelectedNestedElement({parentId: selectedElementData.id, childId: child.id})}
                              >
                                {child.type === 'text' && <Type className="h-3 w-3" />}
                                {child.type === 'button' && <Square className="h-3 w-3" />}
                                {child.type === 'image' && <ImageIcon className="h-3 w-3" />}
                                {child.type === 'header' && <Star className="h-3 w-3" />}
                                {child.type === 'divider' && <Minus className="h-3 w-3" />}
                                {child.type === 'spacer' && <Move className="h-3 w-3" />}
                                <span className="text-xs flex-1 truncate">
                                  {child.type.charAt(0).toUpperCase() + child.type.slice(1)} {index + 1}
                                </span>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={(e) => {
                                    e.stopPropagation()
                                    // Remove element from column
                                    setElements(prev => prev.map(el => {
                                      if (el.id === selectedElementData.id) {
                                        return {
                                          ...el,
                                          children: el.children?.filter(c => c.id !== child.id) || []
                                        }
                                      }
                                      return el
                                    }))
                                  }}
                                  className="h-6 w-6 p-0"
                                >
                                  <Trash2 className="h-3 w-3" />
                                </Button>
                              </div>
                            ))}
                          </div>
                        )}
                      </div>
                    </div>
                    
                    <div className="mt-2 text-xs text-muted-foreground">
                      <p className="font-medium mb-1">Column Tips:</p>
                      <ul className="space-y-1">
                        <li>• Elements are distributed alternately between columns</li>
                        <li>• Add text, buttons, images, headers, dividers, or spacers</li>
                        <li>• Click the trash icon to remove elements</li>
                        <li>• Preview shows the final layout</li>
                      </ul>
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        )}
      </div>

      {/* Right Panel - Preview */}
      <div className="flex-1 flex flex-col">
        {/* Preview Header */}
        <div className="p-3 lg:p-4 border-b border-border bg-card flex-shrink-0">
          <div className="flex flex-col lg:flex-row lg:items-center justify-between gap-3">
            <div>
              <h2 className="text-lg lg:text-xl font-semibold text-card-foreground">Email Preview</h2>
              <p className="text-xs lg:text-sm text-muted-foreground mt-1">Click on any element to edit its properties</p>
            </div>
            <div className="flex items-center gap-2 lg:gap-3 flex-wrap">
              <Button 
                variant="outline" 
                size="sm" 
                onClick={() => setEmailPreviewTheme(theme => theme === 'dark' ? 'light' : 'dark')}
                className="border-border text-foreground hover:bg-accent hover:text-accent-foreground h-8 px-2 lg:px-3"
              >
                {emailPreviewTheme === 'dark' ? '🌙' : '☀️'} <span className="hidden sm:inline">{emailPreviewTheme === 'dark' ? 'Dark' : 'Light'}</span>
              </Button>
              <Button 
                variant="outline" 
                size="sm" 
                onClick={copyHTML}
                className="border-border text-foreground hover:bg-accent hover:text-accent-foreground h-8 px-2 lg:px-3"
              >
                <Copy className="h-3 w-3 lg:h-4 lg:w-4 lg:mr-1" />
                <span className="hidden sm:inline">Copy HTML</span>
              </Button>
              
              {/* Scheduling Section */}
              <div className="flex items-center gap-1 lg:gap-2 border rounded-lg px-2 lg:px-3 py-1">
                <div className="flex items-center gap-1 lg:gap-2">
                  <Clock className="h-3 w-3 lg:h-4 lg:w-4 text-muted-foreground" />
                  <span className="text-xs lg:text-sm font-medium">Schedule</span>
                </div>
                <Select
                  value={scheduleType}
                  onValueChange={(value: "immediate" | "custom" | "preset") => setScheduleType(value)}
                  disabled={isSending}
                >
                  <SelectTrigger className="w-24 h-8">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="immediate">Now</SelectItem>
                    <SelectItem value="preset">Preset</SelectItem>
                    <SelectItem value="custom">Custom</SelectItem>
                  </SelectContent>
                </Select>

                {scheduleType === "preset" && (
                  <Select
                    value={presetSchedule}
                    onValueChange={setPresetSchedule}
                    disabled={isSending}
                  >
                    <SelectTrigger className="w-32 h-8">
                      <SelectValue placeholder="Time" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="in 1 hour">In 1 hour</SelectItem>
                      <SelectItem value="in 2 hours">In 2 hours</SelectItem>
                      <SelectItem value="in 4 hours">In 4 hours</SelectItem>
                      <SelectItem value="in 6 hours">In 6 hours</SelectItem>
                      <SelectItem value="in 12 hours">In 12 hours</SelectItem>
                      <SelectItem value="tomorrow at 9am">Tomorrow 9am</SelectItem>
                      <SelectItem value="tomorrow at 2pm">Tomorrow 2pm</SelectItem>
                      <SelectItem value="next monday at 9am">Next Monday 9am</SelectItem>
                    </SelectContent>
                  </Select>
                )}

                {scheduleType === "custom" && (
                  <div className="flex items-center gap-1">
                    <Input
                      type="date"
                      value={scheduledDate}
                      onChange={(e) => setScheduledDate(e.target.value)}
                      disabled={isSending}
                      className="w-28 h-8 text-xs"
                    />
                    <Input
                      type="time"
                      value={scheduledTime}
                      onChange={(e) => setScheduledTime(e.target.value)}
                      disabled={isSending}
                      className="w-20 h-8 text-xs"
                    />
                  </div>
                )}
              </div>
              
              <Button 
                onClick={handleSend} 
                disabled={!subject.trim() || isSending}
                className="bg-primary text-primary-foreground hover:bg-primary/90 h-8 px-3 lg:px-4"
              >
                {isSending ? (
                  <>
                    <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                    {scheduleType !== "immediate" ? "Scheduling..." : "Sending..."}
                  </>
                ) : (
                  <>
                    <Send className="h-4 w-4 mr-2" />
                    {scheduleType !== "immediate" ? "Schedule Email" : "Send Email"}
                  </>
                )}
              </Button>
            </div>
          </div>
        </div>

        {/* Preview Content */}
        <div className="flex-1 overflow-auto bg-background p-3 lg:p-6 min-h-0">
          <div className="max-w-2xl mx-auto">
            <Card className="shadow-lg bg-card border-border">
              <CardHeader className="bg-card border-b border-border">
                <CardTitle className="text-lg text-card-foreground">Subject: {subject || 'No subject'}</CardTitle>
              </CardHeader>
              <CardContent className="p-0">
                <div 
                  className={`email-preview ${emailPreviewTheme === 'dark' ? 'dark' : 'light'}`}
                  style={{ 
                    fontFamily: 'Arial, sans-serif',
                    lineHeight: '1.6',
                    color: emailPreviewTheme === 'dark' ? '#ffffff' : '#000000',
                    backgroundColor: emailPreviewTheme === 'dark' ? '#1f2937' : '#ffffff',
                    maxWidth: '600px',
                    margin: '0 auto',
                    padding: '20px',
                    border: `1px solid ${emailPreviewTheme === 'dark' ? '#374151' : '#e5e7eb'}`,
                    borderRadius: '8px'
                  }}
                >
                  {elements.map(element => {
                    const styles = element.styles
                    const isSelected = selectedElement === element.id
                    
                    switch (element.type) {
                      case 'text':
                        return (
                          <div 
                            key={element.id} 
                            style={{
                              ...styles,
                              color: emailPreviewTheme === 'dark' ? '#ffffff' : '#000000',
                              backgroundColor: 'transparent'
                            }}
                            className={`text-element ${isSelected ? 'ring-2 ring-blue-500 ring-opacity-50' : ''} cursor-pointer hover:ring-1 hover:ring-gray-300 transition-all`}
                            onClick={() => setSelectedElement(element.id)}
                            dangerouslySetInnerHTML={{ __html: processTextContent(element.content) }}
                          />
                        )
                      case 'button':
                        return (
                          <div 
                            key={element.id} 
                            style={{ textAlign: 'center', margin: '20px 0' }}
                            className={`${isSelected ? 'ring-2 ring-blue-500 ring-opacity-50 p-2' : ''} cursor-pointer hover:ring-1 hover:ring-gray-300 transition-all`}
                            onClick={() => setSelectedElement(element.id)}
                          >
                            <button 
                              style={{
                                backgroundColor: element.properties?.color || '#007bff',
                                color: '#ffffff',
                                padding: '12px 24px',
                                border: 'none',
                                borderRadius: '4px',
                                cursor: 'pointer',
                                fontSize: '16px',
                                fontWeight: 'bold'
                              }}
                            >
                              {element.properties?.text || element.content}
                            </button>
                          </div>
                        )
                      case 'image':
                        return (
                          <div 
                            key={element.id} 
                            style={{ textAlign: 'center', margin: '20px 0' }}
                            className={`${isSelected ? 'ring-2 ring-blue-500 ring-opacity-50 p-2' : ''} cursor-pointer hover:ring-1 hover:ring-gray-300 transition-all`}
                            onClick={() => setSelectedElement(element.id)}
                          >
                            <img 
                              src={element.content} 
                              alt="Email image" 
                              style={{ 
                                maxWidth: '100%', 
                                height: 'auto',
                                borderRadius: '4px'
                              }} 
                            />
                          </div>
                        )
                      case 'divider':
                        return (
                          <div 
                            key={element.id} 
                            style={{ 
                              borderTop: '1px solid #e0e0e0', 
                              margin: '20px 0',
                              ...styles
                            }}
                            className={`${isSelected ? 'ring-2 ring-blue-500 ring-opacity-50 p-2' : ''} cursor-pointer hover:ring-1 hover:ring-gray-300 transition-all`}
                            onClick={() => setSelectedElement(element.id)}
                          />
                        )
                      case 'spacer':
                        return (
                          <div 
                            key={element.id} 
                            style={{ 
                              height: element.content || '20px',
                              ...styles
                            }}
                            className={`${isSelected ? 'ring-2 ring-blue-500 ring-opacity-50' : ''} cursor-pointer hover:ring-1 hover:ring-gray-300 transition-all`}
                            onClick={() => setSelectedElement(element.id)}
                          />
                        )
                      case 'header':
                        return (
                          <div 
                            key={element.id} 
                            style={{
                              textAlign: 'center',
                              padding: '20px 0',
                              fontSize: '24px',
                              fontWeight: 'bold',
                              color: emailPreviewTheme === 'dark' ? '#ffffff' : '#000000',
                              backgroundColor: 'transparent',
                              ...styles
                            }}
                            className={`${isSelected ? 'ring-2 ring-blue-500 ring-opacity-50 p-2' : ''} cursor-pointer hover:ring-1 hover:ring-gray-300 transition-all`}
                            onClick={() => setSelectedElement(element.id)}
                          >
                            {element.content}
                          </div>
                        )
                      case 'footer':
                        return (
                          <div 
                            key={element.id} 
                            style={{
                              textAlign: 'center',
                              padding: '20px 0',
                              color: '#666',
                              fontSize: '14px',
                              backgroundColor: 'transparent',
                              ...styles
                            }}
                            className={`${isSelected ? 'ring-2 ring-blue-500 ring-opacity-50 p-2' : ''} cursor-pointer hover:ring-1 hover:ring-gray-300 transition-all`}
                            onClick={() => setSelectedElement(element.id)}
                          >
                            Footer content will be generated automatically
                          </div>
                        )
                      case 'columns':
                        return (
                          <div 
                            key={element.id} 
                            className={`${isSelected ? 'ring-2 ring-blue-500 ring-opacity-50 p-2' : ''} cursor-pointer hover:ring-1 hover:ring-gray-300 transition-all`}
                            onClick={() => setSelectedElement(element.id)}
                            dangerouslySetInnerHTML={{ __html: generateColumnsHTML(element) }}
                          />
                        )
                      default:
                        return null
                    }
                  })}
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>

      {/* Save Template Dialog */}
      <Dialog open={showSaveDialog} onOpenChange={setShowSaveDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Save Email Template</DialogTitle>
            <DialogDescription>
              Save your current email design as a reusable template.
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label htmlFor="template-name">Template Name</Label>
              <Input
                id="template-name"
                value={templateName}
                onChange={(e) => setTemplateName(e.target.value)}
                placeholder="Enter template name..."
              />
            </div>
            <div>
              <Label htmlFor="template-description">Description (Optional)</Label>
              <Textarea
                id="template-description"
                value={templateDescription}
                onChange={(e) => setTemplateDescription(e.target.value)}
                placeholder="Describe this template..."
                rows={2}
              />
            </div>
            <div>
              <Label htmlFor="template-category">Category</Label>
              <Select value={templateCategory} onValueChange={setTemplateCategory}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="general">General</SelectItem>
                  <SelectItem value="newsletter">Newsletter</SelectItem>
                  <SelectItem value="promotional">Promotional</SelectItem>
                  <SelectItem value="onboarding">Onboarding</SelectItem>
                  <SelectItem value="announcement">Announcement</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setShowSaveDialog(false)}>
              Cancel
            </Button>
            <Button onClick={saveTemplate} disabled={!templateName.trim() || loading}>
              {loading ? 'Saving...' : 'Save Template'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Load Template Dialog */}
      <Dialog open={showLoadDialog} onOpenChange={setShowLoadDialog}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Load Email Template</DialogTitle>
            <DialogDescription>
              Choose a template to load into the designer.
            </DialogDescription>
          </DialogHeader>
          <div className="max-h-96 overflow-y-auto">
            {loading ? (
              <div className="text-center py-8">
                <p>Loading templates...</p>
              </div>
            ) : templates.length === 0 ? (
              <div className="text-center py-8 text-muted-foreground">
                <FolderOpen className="h-12 w-12 mx-auto mb-3 opacity-50" />
                <p>No templates found</p>
                <p className="text-sm">Create your first template by saving your current design</p>
              </div>
            ) : (
              <div className="space-y-3">
                {templates.map((template) => (
                  <div
                    key={template.id}
                    className="p-4 border rounded-lg hover:border-border/80 transition-colors border-border"
                  >
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-2">
                          <h3 className="font-medium">{template.name}</h3>
                          {template.is_favorite && (
                            <Star className="h-4 w-4 text-yellow-500 fill-current" />
                          )}
                          <Badge variant="outline" className="text-xs">
                            {template.category}
                          </Badge>
                          {template.whop_user_id === 'default' && (
                            <Badge variant="secondary" className="text-xs">
                              Default
                            </Badge>
                          )}
                        </div>
                        {template.description && (
                          <p className="text-sm text-muted-foreground mb-2">{template.description}</p>
                        )}
                        <p className="text-xs text-muted-foreground">
                          Subject: {template.subject}
                        </p>
                        {template.usage_count > 0 && (
                          <p className="text-xs text-muted-foreground">
                            Used {template.usage_count} times
                          </p>
                        )}
                      </div>
                      <div className="flex items-center gap-1">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => loadTemplate(template.id)}
                          disabled={loading}
                        >
                          Load
                        </Button>
                        {template.whop_user_id !== 'default' && (
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button variant="ghost" size="sm">
                                <MoreHorizontal className="h-4 w-4" />
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent>
                              <DropdownMenuItem onClick={() => duplicateTemplate(template.id)}>
                                Duplicate
                              </DropdownMenuItem>
                              <DropdownMenuItem 
                                onClick={() => deleteTemplate(template.id)}
                                className="text-red-600"
                              >
                                Delete
                              </DropdownMenuItem>
                              <DropdownMenuItem onClick={() => openEditDialog(template)}>
                                Edit
                              </DropdownMenuItem>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setShowLoadDialog(false)}>
              Cancel
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Edit Template Dialog */}
      <Dialog open={showEditDialog} onOpenChange={setShowEditDialog}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Edit Email Template</DialogTitle>
            <DialogDescription>
              Edit the properties of your saved template.
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label htmlFor="edit-template-name">Template Name</Label>
              <Input
                id="edit-template-name"
                value={editingTemplateName}
                onChange={(e) => setEditingTemplateName(e.target.value)}
                placeholder="Enter template name..."
              />
            </div>
            <div>
              <Label htmlFor="edit-template-description">Description (Optional)</Label>
              <Textarea
                id="edit-template-description"
                value={editingTemplateDescription}
                onChange={(e) => setEditingTemplateDescription(e.target.value)}
                placeholder="Describe this template..."
                rows={2}
              />
            </div>
            <div>
              <Label htmlFor="edit-template-category">Category</Label>
              <Select value={editingTemplateCategory} onValueChange={setEditingTemplateCategory}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="general">General</SelectItem>
                  <SelectItem value="newsletter">Newsletter</SelectItem>
                  <SelectItem value="promotional">Promotional</SelectItem>
                  <SelectItem value="onboarding">Onboarding</SelectItem>
                  <SelectItem value="announcement">Announcement</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setShowEditDialog(false)}>
              Cancel
            </Button>
            <Button onClick={editTemplate} disabled={loading}>
              {loading ? 'Saving...' : 'Save Changes'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Nested Element Properties */}
      {nestedElementPanel}
          <div className="p-6 border-b border-border">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-sm font-medium">
                Properties - {nestedElement.type.charAt(0).toUpperCase() + nestedElement.type.slice(1)} (Nested)
              </h3>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setSelectedNestedElement(null)}
              >
                ×
              </Button>
            </div>
            
            {nestedElement.type === 'text' && (
              <div>
                <Label>Content</Label>
                <Textarea
                  value={nestedElement.content}
                  onChange={(e) => updateNestedElement(selectedNestedElement.parentId, selectedNestedElement.childId, { content: e.target.value })}
                  rows={3}
                  className="mt-2"
                  placeholder="Enter your text here... Use the toolbar buttons above for easy formatting!"
                />
                <RichTextToolbar
                  onFormat={(format) => {
                    // Handle formatting for nested text elements
                    const textarea = document.getElementById(`nested-textarea-${nestedElement.id}`) as HTMLTextAreaElement
                    if (!textarea) return

                    const start = textarea.selectionStart
                    const end = textarea.selectionEnd
                    const selectedText = nestedElement.content.substring(start, end)
                    let newText = ''

                    switch (format) {
                      case 'bold':
                        newText = `**${selectedText}**`
                        break
                      case 'italic':
                        newText = `*${selectedText}*`
                        break
                      case 'bullet-list':
                        newText = selectedText.split('\n').map(line => `- ${line}`).join('\n')
                        break
                      case 'numbered-list':
                        newText = selectedText.split('\n').map((line, index) => `${index + 1}. ${line}`).join('\n')
                        break
                      case 'quote':
                        newText = selectedText.split('\n').map(line => `> ${line}`).join('\n')
                        break
                      default:
                        return
                    }

                    const updatedContent = nestedElement.content.substring(0, start) + newText + nestedElement.content.substring(end)
                    updateNestedElement(selectedNestedElement.parentId, selectedNestedElement.childId, { content: updatedContent })
                  }}
                  onAlign={(alignment) => updateNestedElement(selectedNestedElement.parentId, selectedNestedElement.childId, {
                    styles: { ...nestedElement.styles, textAlign: alignment }
                  })}
                  currentAlignment={nestedElement.styles.textAlign}
                />
              </div>
            )}
            
            {nestedElement.type === 'button' && (
              <div>
                <Label>Button Text</Label>
                <Input
                  value={nestedElement.content}
                  onChange={(e) => updateNestedElement(selectedNestedElement.parentId, selectedNestedElement.childId, { content: e.target.value })}
                  className="mt-2"
                  placeholder="Enter button text..."
                />
              </div>
            )}
            
            {nestedElement.type === 'image' && (
              <div>
                <Label>Image URL</Label>
                <Input
                  value={nestedElement.content}
                  onChange={(e) => updateNestedElement(selectedNestedElement.parentId, selectedNestedElement.childId, { content: e.target.value })}
                  className="mt-2"
                  placeholder="Enter image URL..."
                />
              </div>
            )}
            
            {nestedElement.type === 'header' && (
              <div>
                <Label>Header Text</Label>
                <Input
                  value={nestedElement.content}
                  onChange={(e) => updateNestedElement(selectedNestedElement.parentId, selectedNestedElement.childId, { content: e.target.value })}
                  className="mt-2"
                  placeholder="Enter header text..."
                />
              </div>
            )}
            
            {nestedElement.type === 'spacer' && (
              <div>
                <Label>Height (px)</Label>
                <Input
                  value={nestedElement.content}
                  onChange={(e) => updateNestedElement(selectedNestedElement.parentId, selectedNestedElement.childId, { content: e.target.value })}
                  className="mt-2"
                  placeholder="Enter height in pixels..."
                />
              </div>
            )}
          </div>
        )
      })()}
    </div>
  )
} 